// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ============================================================
// USER MANAGEMENT
// ============================================================

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String
  role      String    @default("ghost_writer") // "ghost_writer" | "admin" | "author"
  projects  Project[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([email])
}

// ============================================================
// PROJECT & BOOK DATA
// ============================================================

model Project {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Form Data (dal NewProjectModal)
  authorName    String
  authorRole    String
  company       String
  industry      String
  bookTitle     String
  bookSubtitle  String?
  targetReaders String  @db.Text

  // Hero's Journey Data
  currentSituation String @db.Text
  challengeFaced   String @db.Text
  transformation   String @db.Text
  achievement      String @db.Text
  lessonLearned    String @db.Text

  // Business Goals
  businessGoals String @db.Text
  uniqueValue   String @db.Text

  // Technical
  estimatedPages  Int?
  additionalNotes String? @db.Text

  // Status & Generation
  status String @default("draft") // draft, generating_outline, generating_chapters, completed, error

  // Generation Progress (stored as JSON)
  generationProgress Json? @default("{\"status\":\"idle\",\"progress\":0,\"chaptersComplete\":0,\"chaptersTotal\":0}")

  // Master Context (aggiornato dopo ogni capitolo)
  masterContext Json? // { characters, terms, numbers, themes }
  styleGuide    Json? // DEPRECATED: Generato dopo cap 2 (mantenuto per backward compatibility)

  // Style Guide Management (NEW)
  customStyleGuide      String?  @db.Text // User-defined style guide (manual override)
  generatedStyleGuide   String?  @db.Text // AI-generated style guide (after chapter 2)
  styleGuideSource      String? // "manual" | "ai_generated" | "ai_from_docs"
  styleGuideCreatedAt   DateTime?

  // Relations
  outline            Outline?
  chapters           Chapter[]
  generationLogs     GenerationLog[]
  consistencyReports ConsistencyReport[]
  aiConfig           ProjectAIConfig?
  documents          ProjectDocument[] // NEW: Uploaded reference documents

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

// ============================================================
// AI GENERATED CONTENT
// ============================================================

model Outline {
  id        String  @id @default(cuid())
  projectId String  @unique
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  structure      Json // Struttura JSON completa dell'outline
  totalChapters  Int
  estimatedWords Int

  aiModel     String // Modello AI utilizzato per la generazione
  generatedAt DateTime @default(now())

  chapters Chapter[]

  @@index([projectId])
}

model Chapter {
  id        String   @id @default(cuid())
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  outlineId String?
  outline   Outline? @relation(fields: [outlineId], references: [id], onDelete: SetNull)

  chapterNumber Int
  title         String
  content       String @db.Text
  wordCount     Int    @default(0)

  status String @default("pending") // pending, generating, completed, error

  aiModel     String?
  generatedAt DateTime?

  // Prompt usato per la generazione (per debugging e audit)
  systemPrompt String? @db.Text // System prompt usato
  userPrompt   String? @db.Text // User prompt completo usato

  // Metadata estratti durante generazione
  newCharacters String[] @default([]) // Personaggi introdotti in questo cap
  newTerms      Json? // { "termine": "definizione" }
  keyNumbers    Json? // { "metrica": "valore" }

  // Summary e key points (per context dei capitoli futuri)
  summary   String?  @db.Text // Summary generato (500 parole)
  keyPoints String[] @default([]) // 3-5 punti chiave del capitolo

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([projectId, chapterNumber])
  @@index([projectId])
  @@index([status])
}

// ============================================================
// MONITORING & ANALYTICS
// ============================================================

model GenerationLog {
  id        String  @id @default(cuid())
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  step    String // "outline", "chapter_1", "chapter_2", etc.
  aiModel String

  promptTokens     Int
  completionTokens Int
  totalTokens      Int

  cost     Float? // USD
  duration Int // milliseconds

  success      Boolean
  errorMessage String? @db.Text

  createdAt DateTime @default(now())

  @@index([projectId])
  @@index([createdAt])
  @@index([success])
}

// ============================================================
// CONSISTENCY REPORTS
// ============================================================

model ConsistencyReport {
  id        String  @id @default(cuid())
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  report       Json // Report completo dell'AI
  overallScore Int // 0-100

  createdAt DateTime @default(now())

  @@index([projectId])
  @@index([createdAt])
}

// ============================================================
// AI CONFIGURATION (per progetto)
// Technical parameters only - style and content defined in project onboarding
// GPT-5 usa reasoning effort e verbosity invece di temperature/top_p
// ============================================================

model ProjectAIConfig {
  id        String  @id @default(cuid())
  projectId String  @unique
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  // AI Model Parameters
  model String @default("gpt-5-mini")
  // Note: GPT-5 family (gpt-5, gpt-5-mini, gpt-5-nano)

  // GPT-5 Reasoning & Verbosity (sostituisce temperature/top_p)
  reasoningEffort String @default("medium") // minimal, low, medium, high
  verbosity       String @default("medium") // low, medium, high
  maxTokens       Int    @default(20000) // Max output tokens (aumentato per capitoli completi)

  // Legacy parameters (non usati da GPT-5, mantenuti per compatibilit√†)
  temperature      Float? @default(0.7)
  topP             Float? @default(0.95)
  frequencyPenalty Float? @default(0.3)
  presencePenalty  Float? @default(0.3)

  // Chapter Generation Settings
  targetWordsPerChapter Int @default(2000)

  // Custom Prompts (Optional overrides)
  useCustomPrompts          Boolean @default(false)
  customSystemPrompt        String? @db.Text
  customOutlineInstructions String? @db.Text
  customChapterInstructions String? @db.Text

  // Testing & Metadata
  lastTestAt DateTime?
  testOutput String?   @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId])
}

// ============================================================
// DOCUMENT MANAGEMENT
// ============================================================

model ProjectDocument {
  id        String  @id @default(cuid())
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  // File Metadata
  originalFileName String
  fileType         String // "pdf", "docx", "txt"
  fileSizeBytes    Int

  // Extracted Content
  extractedText String @db.Text
  wordCount     Int

  // Purpose & Usage Tracking
  purpose           String  @default("style_reference") // "style_reference" | "content_reference"
  usedForStyleGuide Boolean @default(false)
  usedInChapters    Int[]   @default([]) // Track which chapters used this doc

  // Processing Status
  processingStatus String @default("completed") // "pending" | "processing" | "completed" | "failed"
  errorMessage     String? @db.Text

  uploadedAt DateTime @default(now())

  @@index([projectId])
  @@index([purpose])
  @@index([processingStatus])
}
